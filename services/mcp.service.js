// services/mcp.service.js
// =================================================================
// üß† Cliente Singleton para la conexi√≥n con el motor Playwright MCP
// =================================================================

import { createConnection } from '@playwright/mcp';

class MCPClient {
    constructor() {
        this.client = null;
        // La URL por defecto que el MCP nos proporcion√≥ al iniciarse
        this.defaultUrl = 'http://localhost:8931/mcp';
        this.isConnecting = false;
    }

    /**
     * Conectar al MCP con patr√≥n Singleton y manejo de reconexi√≥n.
     * @param {string} url - URL del servidor MCP
     * @returns {Promise<Object>} Instancia del cliente
     */
    async connect(url = this.defaultUrl) {
        // Si ya est√° conectado, retornar cliente existente
        if (this.client) {
            console.log('‚ÑπÔ∏è Ya existe una conexi√≥n activa al MCP');
            return this.client;
        }

        // Prevenir conexiones simult√°neas
        if (this.isConnecting) {
            throw new Error('‚ö†Ô∏è Ya hay una conexi√≥n en progreso');
        }

        this.isConnecting = true;

        try {
            this.client = await createConnection({ url });
            console.log('‚úÖ Conectado al MCP:', url);

            // Manejar desconexi√≥n inesperada
            this.client.on?.('disconnect', () => {
                console.warn('‚ö†Ô∏è Conexi√≥n MCP perdida inesperadamente');
                this.client = null; // Limpiar la instancia para permitir reconexi√≥n
            });

            return this.client;
        } catch (err) {
            console.error('‚ùå Error al conectar MCP:', err.message);
            throw new Error(`Fallo en conexi√≥n MCP: ${err.message}`);
        } finally {
            this.isConnecting = false;
        }
    }

    /**
     * Desconectar del MCP de forma segura
     */
    async disconnect() {
        if (!this.client) {
            console.log('‚ÑπÔ∏è No hay conexi√≥n activa para cerrar');
            return;
        }

        try {
            // Se asume que el m√©todo 'close' existe en el cliente de MCP
            await this.client.close?.();
            console.log('üîå Conexi√≥n MCP cerrada correctamente');
        } catch (err) {
            console.error('‚ùå Error cerrando MCP:', err.message);
        } finally {
            this.client = null;
        }
    }

    /**
     * Verificar si hay conexi√≥n activa
     * @returns {boolean}
     */
    isConnected() {
        return this.client !== null;
    }

    /**
     * Obtener instancia del cliente con validaci√≥n
     * @returns {Object} Cliente MCP
     * @throws {Error} Si no hay conexi√≥n activa
     */
    getClient() {
        if (!this.client) {
            throw new Error('‚ö†Ô∏è No hay conexi√≥n activa con MCP. Ejecuta connect() primero.');
        }
        return this.client;
    }

    /**
     * Llamar herramienta MCP con validaci√≥n y manejo de errores mejorado
     * * Nota: Utiliza un m√©todo interno (_requestHandlers) para simular la llamada
     * a la herramienta, ya que el SDK de @playwright/mcp a menudo expone esta
     * funcionalidad de forma m√°s directa en la pr√°ctica.
     * * @param {string} toolName - Nombre de la herramienta (Ej: 'browser.launch')
     * @param {Object} args - Argumentos de la herramienta (el payload del nodo)
     * @returns {Promise<Object>} Resultado de la herramienta
     */
    async callTool(toolName, args = {}) {
        const client = this.getClient();

        if (!toolName || typeof toolName !== 'string') {
            throw new Error('‚ö†Ô∏è toolName debe ser un string v√°lido');
        }

        // ‚ö†Ô∏è Nota: Esta es la parte m√°s dependiente de la implementaci√≥n interna del MCP.
        // Asumiendo que 'tools/call' es el manejador correcto.
        const handler = client._requestHandlers?.get('tools/call');

        if (!handler) {
            throw new Error(
                '‚ö†Ô∏è Handler tools/call no disponible en el cliente MCP. La versi√≥n del MCP podr√≠a ser incompatible.',
            );
        }

        try {
            const result = await handler({
                method: 'tools/call',
                params: {
                    name: toolName,
                    arguments: args,
                },
            });

            console.log(`‚úÖ Herramienta "${toolName}" ejecutada exitosamente`);
            return result;
        } catch (err) {
            console.error(`‚ùå Error ejecutando "${toolName}":`, err.message);
            // Re-lanzar un error m√°s claro para el controlador de Express
            throw new Error(`Fallo en herramienta ${toolName}: ${err.message}`);
        }
    }

    /**
     * Listar herramientas disponibles
     * @returns {Promise<Array>} Lista de herramientas
     */
    async listTools() {
        const client = this.getClient();

        try {
            const handler = client._requestHandlers?.get('tools/list');
            if (!handler) {
                throw new Error('Handler tools/list no disponible en el cliente MCP');
            }

            const result = await handler({ method: 'tools/list' });
            return result.tools || [];
        } catch (err) {
            console.error('‚ùå Error listando herramientas:', err.message);
            // Simplemente devuelve un array vac√≠o en caso de fallo en listado
            return [];
        }
    }
}

// Exportar instancia singleton
const mcpClient = new MCPClient();

// Exportaciones simplificadas para el uso en otros m√≥dulos
export const connectMCP = (url) => mcpClient.connect(url);
export const disconnectMCP = () => mcpClient.disconnect();
export const getClient = () => mcpClient.getClient();
export const callTool = (name, args) => mcpClient.callTool(name, args);
export const isConnected = () => mcpClient.isConnected();
export const listTools = () => mcpClient.listTools();

export default mcpClient;
